name: 🚀 Continuous Deployment

on:
  push:
    branches: [main]
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment Environment"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: "18.x"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Push Docker Images
  build-images:
    name: 🏗️ Build & Push Images
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Applications
        run: npm run build:all

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build and Push Backend Image
        id: build-backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/docker/backend.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: 🏗️ Build and Push Frontend Image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infra/docker/frontend.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.meta.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.nestcraft.dev

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: 🔐 Configure Kubernetes Access
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_STAGING }}" | base64 -d > ~/.kube/config

      - name: 🔄 Update Kubernetes Manifests
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|image: .*backend.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ needs.build-images.outputs.image-tag }}|g" infra/k8s/staging/backend.yaml
          sed -i "s|image: .*frontend.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.build-images.outputs.image-tag }}|g" infra/k8s/staging/frontend.yaml

      - name: 🚀 Deploy to Staging
        run: |
          kubectl apply -f infra/k8s/staging/ --namespace=nestcraft-staging

      - name: ⏳ Wait for Deployment
        run: |
          kubectl rollout status deployment/nestcraft-backend -n nestcraft-staging --timeout=300s
          kubectl rollout status deployment/nestcraft-frontend -n nestcraft-staging --timeout=300s

      - name: 🔍 Verify Deployment
        run: |
          # Wait a moment for services to be ready
          sleep 30

          # Get service URLs
          BACKEND_URL=$(kubectl get service nestcraft-backend -n nestcraft-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

          # Health check
          curl -f "http://${BACKEND_URL}/api/v1/health" || exit 1

          echo "✅ Staging deployment successful!"

  # Run Smoke Tests
  smoke-tests:
    name: 🧪 Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📥 Install Test Dependencies
        run: npm install --only=dev

      - name: 🧪 Run Smoke Tests
        run: |
          # Run smoke tests against staging environment
          BASE_URL=https://staging.nestcraft.dev npm run test:smoke
        env:
          NODE_ENV: test
          API_BASE_URL: https://staging.nestcraft.dev/api/v1

  # Deploy to Production
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, smoke-tests]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://nestcraft.dev

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: 🔐 Configure Kubernetes Access
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config

      - name: 💾 Backup Current Deployment
        run: |
          kubectl get deployment nestcraft-backend -n nestcraft-production -o yaml > backup-backend.yaml
          kubectl get deployment nestcraft-frontend -n nestcraft-production -o yaml > backup-frontend.yaml

      - name: 🔄 Update Kubernetes Manifests
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|image: .*backend.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ needs.build-images.outputs.image-tag }}|g" infra/k8s/production/backend.yaml
          sed -i "s|image: .*frontend.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.build-images.outputs.image-tag }}|g" infra/k8s/production/frontend.yaml

      - name: 🚀 Deploy to Production
        run: |
          kubectl apply -f infra/k8s/production/ --namespace=nestcraft-production

      - name: ⏳ Wait for Deployment
        run: |
          kubectl rollout status deployment/nestcraft-backend -n nestcraft-production --timeout=600s
          kubectl rollout status deployment/nestcraft-frontend -n nestcraft-production --timeout=600s

      - name: 🔍 Verify Production Deployment
        run: |
          # Wait a moment for services to be ready
          sleep 60

          # Get service URLs
          BACKEND_URL=$(kubectl get service nestcraft-backend -n nestcraft-production -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

          # Health check
          curl -f "http://${BACKEND_URL}/api/v1/health" || exit 1

          echo "✅ Production deployment successful!"

      - name: 📢 Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## 🚀 Release Notes

            ### 🆕 New Features
            - Feature updates from this release

            ### 🔧 Improvements
            - Performance and stability improvements

            ### 🐛 Bug Fixes
            - Bug fixes included in this release

            ### 📊 Deployment Info
            - **Backend Image**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ needs.build-images.outputs.image-tag }}`
            - **Frontend Image**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ needs.build-images.outputs.image-tag }}`
            - **Deployment Time**: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: false

  # Rollback (Manual Trigger)
  rollback:
    name: 🔄 Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment != ''
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.28.0"

      - name: 🔐 Configure Kubernetes Access
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets[format('KUBECONFIG_{0}', upper(github.event.inputs.environment))] }}" | base64 -d > ~/.kube/config

      - name: 🔄 Rollback Deployment
        run: |
          kubectl rollout undo deployment/nestcraft-backend -n nestcraft-${{ github.event.inputs.environment }}
          kubectl rollout undo deployment/nestcraft-frontend -n nestcraft-${{ github.event.inputs.environment }}

      - name: ⏳ Wait for Rollback
        run: |
          kubectl rollout status deployment/nestcraft-backend -n nestcraft-${{ github.event.inputs.environment }} --timeout=300s
          kubectl rollout status deployment/nestcraft-frontend -n nestcraft-${{ github.event.inputs.environment }} --timeout=300s

  # Notification
  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: 📊 Determine Deployment Status
        id: status
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" || "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=🚀" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=💥" >> $GITHUB_OUTPUT
          fi

      - name: 📝 Create Deployment Summary
        run: |
          echo "## ${{ steps.status.outputs.emoji }} Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | URL |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|-----|" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.deploy-staging.result }}" != "skipped" ]]; then
            echo "| Staging | ${{ needs.deploy-staging.result == 'success' && '✅ Success' || '❌ Failed' }} | https://staging.nestcraft.dev |" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.deploy-production.result }}" != "skipped" ]]; then
            echo "| Production | ${{ needs.deploy-production.result == 'success' && '✅ Success' || '❌ Failed' }} | https://nestcraft.dev |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date)" >> $GITHUB_STEP_SUMMARY
