version: "3.8"

services:
  # NestCraft Backend Service (Production)
  backend:
    build:
      context: ..
      dockerfile: infra/docker/backend.Dockerfile
      target: runner
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
      - PORT=4000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_DATABASE=${DB_DATABASE}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - API_PREFIX=api/v1
      - CORS_ORIGIN=${CORS_ORIGIN}
      - RATE_LIMIT_TTL=${RATE_LIMIT_TTL:-900}
      - RATE_LIMIT_LIMIT=${RATE_LIMIT_LIMIT:-100}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    networks:
      - nestcraft-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 256M
          cpus: "0.25"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # NestCraft Frontend Service (Production)
  frontend:
    build:
      context: ..
      dockerfile: infra/docker/frontend.Dockerfile
      target: runner
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NEXT_PUBLIC_APP_NAME=NestCraft
      - NEXT_TELEMETRY_DISABLED=1
      - NEXT_PUBLIC_GA_ID=${NEXT_PUBLIC_GA_ID}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - nestcraft-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
        reservations:
          memory: 128M
          cpus: "0.1"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - ../database/init:/docker-entrypoint-initdb.d
    networks:
      - nestcraft-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: "0.5"
        reservations:
          memory: 512M
          cpus: "0.25"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nestcraft-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: "0.25"
        reservations:
          memory: 128M
          cpus: "0.1"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Nginx Load Balancer & Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - static_files:/var/www/static
    depends_on:
      - frontend
      - backend
    networks:
      - nestcraft-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.25"
        reservations:
          memory: 64M
          cpus: "0.1"

  # Database Backup Service
  postgres-backup:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
      - POSTGRES_HOST=postgres
    volumes:
      - postgres_backups:/backups
      - ./scripts/backup.sh:/backup.sh
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nestcraft-network
    restart: unless-stopped
    command: /bin/sh -c "chmod +x /backup.sh && crond -f"

  # Log Aggregation (Production Monitoring)
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    volumes:
      - logs_data:/var/log
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf
    networks:
      - nestcraft-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: "0.1"

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  static_files:
    driver: local

networks:
  nestcraft-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

secrets:
  db_password:
    external: true
  jwt_secret:
    external: true
  redis_password:
    external: true
